#!/bin/bash

# SVTGet v0.1.4
# Updates can be found at http://svtget.se/
# Support the project with Flattr: https://flattr.com/thing/300374/SVT-Get-a-local-cache-tool-for-SVT-Play
#
# Description: The script can download the RTMP streams available from the
# online streaming service "SVT Play", managed by Sveriges Television
#
# Original author: Mikael "MMN-o" Nordfeldth <mmn@hethane.se>
# Additional authors: sikevux, DomeDan, Erik Modén
# License: GPLv3
# http://www.gnu.org/licenses/gpl-3.0.txt
#
# URL: http://svtget.se/
# Flattr: http://flattr.com/thing/300374/SVT-Get-a-local-cache-tool-for-SVT-Play

# Changelog:
# -- v0.1.4
#    * Erik Modén Changed filename to use folderStructure and title from json data.
# -- v0.1.3
#    * Erik Modén updated script to work with the new svtplay that was launched 2012-06-04
# -- v0.1.2
#    * deb package removed (...maintenance...)
#    * DomeDan added Öppna Arkivet support
#    * DomeDan added subtitle download support
#    * script can now choose to play clips directly
# -- v0.1.1
#    * deb package created by sikevux, small fixes on other stuff
# -- v0.1
#    * Initial functionality. Normal links seem to be working.

# Sample usage:
# ./svtget http://svtplay.se/v/2440756/k_special/presspauseplay

# trap exit (ctrl-c) and kill worker processes
trap 'kill $(jobs -p) 2>/dev/null' EXIT

if [ `uname` == "Darwin" ]; then
    SED=gsed
else
    SED=sed
fi

svtplay_url="http://www.svtplay.se"

# actions
play=""
subtitles=""
debug=""
keep_temp_files=""
num_workers=8
# change these in case you find something working better for you.
# you can also give them as argument using flag -f "-vcodec copy..."
# if you have problems with ffmpeg, try replaceing '-acodec....' with 
# '-strict experimental'
# this will increase the time needed for muxing since audio is modified.
ffmpeg_flags="-f mp4 -vcodec copy -acodec copy -absf aac_adtstoasc"

# openssl and hexdump is needed in case you don't pipe straight to player
DEPENDENCIES="ffmpeg curl $SED cut bash tr openssl hexdump"
PLAYERS="mplayer vlc"
for DEP in $DEPENDENCIES; do
	if [ -z "`which $DEP`" ]; then
		echo "ERROR: Missing dependency '$DEP'." >&2
		exit
	fi
done

# Available bitrates: 320 850 1400 2400
BITRATE=""
function set_bitrate {
	case $1 in
	l)	BITRATE=420	;;
	m)	BITRATE=900	;;
	n)	BITRATE=1660	;;
	h)	BITRATE=2760	;;
        320|420|620|900|1600|2760)
		BITRATE=$1      ;;
	850|1400|2400)
		# bitrate for rtmp (might be depricated)
		echo "Bitrate used for possibly depricated rtmp streams, will not work for new applehttp streams."
		BITRATE=$1	;;
	*)
		echo "Bad quality setting ($1), keeping setting '$BITRATE'"
		;;
	esac
}

function bitrateToRes {
    case $1 in
	320)  echo "320x180" ;;
	420)  echo "480x270" ;;
	620)  echo "576x324" ;;
	900)  echo "704x396" ;;
	1660) echo "1024x576" ;;
	2760) echo "1280x720" ;;
	*)    echo ""
    esac
}

function resToBitrate {
    case $1 in
	"320x180")  echo "320" ;;
	"480x270")  echo "420" ;;
	"576x324")  echo "620" ;;
	"704x396")  echo "900" ;;
	"1024x576") echo "1660" ;;
	"1280x720") echo "2760" ;;
	*)          echo "-"
    esac
}

function get_tcUrlsM3U8 {
        local m3u8=$1
	local res=$2
	unset prevmatch
	IFS=$'\n'
	for i in $m3u8; do
	    if [ $prevmatch ]; then
		bitr=$(resToBitrate $prevmatch)
		echo "$bitr|$prevmatch|$i"
		unset prevmatch
	    fi
	    if [ `echo "$i" | grep RESOLUTION=$res` ]; then
		prevmatch=`echo "$i" | $SED -n 's/.*RESOLUTION=\([0-9]\+x[0-9]\+\).*/\1/p'`
	    fi
	done
}

# kept for backwards compability and for flv streams
function get_tcUrlsOLD {
	local html=$1
	local bitrate=$2
	expr "$bitrate" + 1 &> /dev/null
	if [ $? -gt 0 ] || [ -z "$bitrate" ] || [ "$bitrate" -eq 0 ]; then
		bitrate='[0-9]\+'
	fi
	#normal clip
	tcUrls=`echo $html | $SED 's/},{/}\n{/g' | $SED "s/\(rtmp[e]\?:[^|&]*\)\",\"bitrate\":\($bitrate\)/\\n\2|-|\1\\n/g" | grep -E '^[[:digit:]]+\|' | sort -n | uniq`
	if [ -z "$tcUrls" ]; then
	 	#from öppet arkiv
		tcUrls=`echo $html | $SED "s/\(rtmp[e]\?:[^|&]*\)&amp;/\\n320|-|\1\\n/g" | grep -E '^[[:digit:]]+\|' | sort -n | uniq`
	fi
	if [ -z "$tcUrls" ]; then
		#flv-files
		tcUrls=$(echo $html | $SED 's/},{/}\n{/g' | $SED "s/\(http[s]\?:[^\"]*\.flv\)\",\"bitrate\":\($bitrate\)/\\n\2|-|\1\\n/g" | grep -E '^[[:digit:]]+\|' | sort -n | uniq)
	fi
	echo $tcUrls
}

function get_sub {
	local html=$1
	echo $html | $SED -n 's/.*"subtitleReferences":\[{"url":"\([^"]\+\)".*/\1/p'
}

function print_aligned {
    printf '%-4s' "$1"
    shift
    while [ "$1" ]; do
	a="$1"
	shift
	if [ "$1" ]; then
	    printf '%-15s' "$a"
	else
	    printf '%s\n' "$a"
	fi
    done
}

function pick_tcUrl {
        print_aligned "#" "Bitrate" "Resolution" "Stream name"
	let n=1
	for STREAM in $@; do
		local BITRATE=`echo $STREAM | cut -d '|' -f 1 -`
		local RESOLUTION=`echo $STREAM | cut -d '|' -f 2 -`
		Streams[$n]=`echo $STREAM | cut -d '|' -f 3 -`
		local NAME=`basename $STREAM | cut -d '?' -f 1 -`
		print_aligned "$n." "${BITRATE} kbps" "${RESOLUTION}" "$NAME"
		let n++
	done
	
	local stream=0
	if [ "$#" -eq 1 ]; then
		stream=1
	fi
	while [ -z ${Streams[$stream]} ]; do
		echo -ne "\nWhich file do you want? [#] "
		read stream
		if [ -n "$stream" ] && [ "q" == "$stream" ]; then
			exit
		fi
	done
	echo "" # add some space between print-outs
	tcUrl=${Streams[$stream]}
}

function askOverwrite {
    local file=$1
    echo  "The file \"$file\" exists already!"
    while true; do
	read -p "Do you want to overwrite? [y/n] " yesno
	case $yesno in
	    y* | Y* )
		rm -rf $file
		break
		;;
	    n* | N* | q )
		exit 1
		;;
	    *)
		;;
	esac
    done
    echo "" # add some space between print-outs
}

function print_help {
	echo -e "Usage: $0 -q [l|m|n|h|320|420|620|850|900|1400|1600|2400|2760] -s $svtplay_url/..."
	echo -e " -q\tquality of the stream"
	echo -e " -p\tplay output"
	echo -e " -s\tfetch subtitles"
	echo -e " -f\tffmpeg flags"
	echo -e " -c\tnumber of concurrent chunk downloads"
	echo -e " -x\tdon't clean up temporary files"
	echo -e " -d\print debug messages and cmd line"
}


function debug {
    if [ $debug ]; then
	echo -e $1
    fi
}

function set_mediaplayer {
    for i in $PLAYERS; do
	mediaplayer=`which "$i"`
	if [ -n "$mediaplayer" ]; then
	    break;
	fi
    done
    if [ -z "$mediaplayer" ]; then
	echo "No media player found (tried: $PLAYERS)"
	exit 1
    fi
    debug "mediaplayer:\n$mediaplayer"
}


# This function acts the same as the seq command under Linux.
# On Mac closest matching command is 'jot' but the arguments differ so
# it was easier to write an own version
# Takes 1, 2 or 3 arguments
function gen_seq {
    if [ $# -eq 1 ]; then
	local start=1
	local inc=1
	local stop=$1
    elif [ $# -eq 2 ]; then
	local start=$1
	local inc=1
	local stop=$2
    else
	local start=$1
	local inc=$2
	local stop=$3
    fi
    for ((i=$start; i<=$stop; i+=$inc)); do
	echo $i
    done
}


function print_progress {
    echo "Downloading ts-chunks ($num_workers workers)..."
    local temp_dir=$1
    local num_files=$2
    sleep 1 # give workers a chance to start
    local counter=`ls ${temp_dir}/*.ts 2>/dev/null | wc -w | tr -d ' '`
    while [ $counter -le $num_files ]; do
	if [ $counter -eq $num_files ]; then
	    echo -e "\r$counter of $num_files chunks finished\n"
	    break
	else
	    echo -e "\r$counter of $num_files chunks finished\c"
	    sleep 1
	    counter=`ls ${temp_dir}/*.ts 2>/dev/null | wc -w | tr -d ' '`
	fi
    done
}


function worker {
    local temp_dir=$1
    local ix_list=$2
    local hex_key=$3
    cd "$temp_dir"
    for ix in $ix_list; do
	url=${ts_urls[`expr $ix - 1`]}
	num=`printf '%04d' $ix`
	file=${num}.ts
	if [ $hex_key ]; then
	    xfile=${num}.tsx
	    curl -s "$url" -o "$xfile"
	    decrypt_ts $hex_key $ix $xfile $file
	    if [ -e $file ]; then
		rm -rf $xfile
	    else
		echo "download or decrypt failed! $url"
		break
	    fi
	else
	    curl -s "$url" -o "$file"
	    if [ ! -e $file ]; then
		echo "download failed! $url"
		break
	    fi
	fi
    done
    exit 0
}


function get_hex_key {
    local m3u8=$1
    local hex_key=""
    local key_url=`echo "$m3u8" | grep "EXT-X-KEY" | $SED -n 's/.*URI="\([^"]\+\).*/\1/p'`
    if [ $key_url ]; then
	curl -s "$key_url" -o "svtget_crypt.key"
	if [ ! -e "svtget_crypt.key" ]; then
	    echo "download of crypt.key failed!"
	    exit 1
	fi
	hex_key=`hexdump -e '16/1 "%02x"' svtget_crypt.key`
	rm -rf "svtget_crypt.key"
	if [ ! $hex_key ]; then
	    echo "hexdump failed!"
	    exit 1
	else
	    echo $hex_key
	fi
    fi
}


function decrypt_ts {
    local hex_key=$1
    local ix=$2
    local in_file=$3
    local out_file=$4
    iv=`printf '%032x' $ix`
    openssl aes-128-cbc -d -nosalt -iv $iv -K $hex_key -in $in_file -out $out_file
}

function join_and_mux_ts {
    echo "Muxing ts-chunks..."
    local temp_dir=$1
    local file_prefix=$2
    local num_files=$3
    local max_fds=`ulimit -n`
    local fds_needed=$(($num_files + 8))
    if [ $max_fds -lt $fds_needed ]; then
	# setting max number of open file descriptors to double needed. within this scope
	# if you have any problem with this manually raise max number of open decriptors in .bashrc
	ulimit -n $fds_needed
	if [ $? -ne 0 ]; then
	    echo "Warning: Unable to increase max number of open file descriptors."
	fi
    fi
    local file_list=`ls ${temp_dir}/*.ts`
    local file_pipe=`echo $file_list | tr ' ' '|'`
    ffmpeg -i concat:"$file_pipe" $ffmpeg_flags "${file_prefix}.mp4"
    if [ $? -ne 0 ]; then
	echo "Failed to join and mux the files."
    fi
    if [ ! $keep_temp_files ]; then
	echo "Cleaning up temporary files..."
	remove_temporary_files $temp_dir
    fi
}

function temp_dir {
    local file_prefix=$1
    if [ ! $file_prefix ]; then
	echo "ERROR: no file-name"
	exit 1
    fi
    echo "${file_prefix}.tmp"
}

function remove_temporary_files {
    local temp_dir=$1
    if  [ -d "$temp_dir" ]; then
	rm -rf "$temp_dir"
    fi
}


function parallel_download {
    local tcUrl=$1
    local file_prefix=$2
    local m3u8=`curl -s "$tcUrl"`
    local hex_key=$(get_hex_key "$m3u8")
    local ts_urls=(`echo "$m3u8" | grep -v "^#"`)
    local num_files=${#ts_urls[@]}

    local temp_dir=$(temp_dir $file_prefix)
    # remove any previous temporary files
    remove_temporary_files $temp_dir
    mkdir "$temp_dir"
    
    # spawn download- and decrypt-workers
    for i in $(gen_seq 1 $num_workers); do
	ix_list=$(gen_seq $i $num_workers $num_files)
	(worker $temp_dir "$ix_list" $hex_key) &
    done
    
    print_progress $temp_dir $num_files
    wait; sleep 1 # wait for any remaining process to finish

    join_and_mux_ts $temp_dir $file_prefix $num_files
}


function do_eval {
    local cmd=$1
    debug "$cmd"
    if [ $debug ]; then
	exit 0
    fi
    eval $cmd
}


while getopts "q:f:c:psxdh" opt; do
	case $opt in
	q)
		set_bitrate $OPTARG
		;;
	f)
		ffmpeg_flags=$OPTARG
		;;
	c)
		num_workers=$OPTARG
		;;
	p)
	        set_mediaplayer
		play="true"
		;;
	s)
		subtitles="true"
		;;
	x)
		keep_temp_files="true"
		;;
	d)
		debug="true"
		;;
	h)
		print_help
		exit 0
		;;
	\?)
		echo "invalid option: -$OPTARG" >&2
		exit 1
		;;
	esac
done

pageUrl=${!#}
if [ -z "$pageUrl" ] || [ "$pageUrl" == $0 ]; then
	print_help
	exit 1
fi

if [[ ! "$pageUrl" =~ $svtplay_url ]]; then
	echo "Bad URL. Not SVT Play?" >&2
	exit 1
fi

HTML=`curl -s "$pageUrl?type=embed"`
JSON=`curl -s "$pageUrl?output=json"`
debug "JSON:\n$JSON"
swfUrl="$svtplay_url"`echo $HTML | $SED -n 's/^.*<param name="movie" value="\([^"]\+\)\".*/\1/p'`
debug "swfUrl:\n$swfUrl"

m3u8Url=`echo $JSON | $SED -n 's/.*{"url":"\([^"]\+\)".*"playerType":"ios".*/\1/p'`
if [ $m3u8Url ]; then
    debug "m3u8Url:\n$m3u8Url"
    M3U8=`curl -s "$m3u8Url"`
    debug "M3U8:\n$M3U8"
    resolution=$(bitrateToRes $BITRATE)
    debug "resolution:\n$resolution"
    tcUrls=$(get_tcUrlsM3U8 "$M3U8" $resolution)
    tcUrls=`echo $tcUrls | tr ' ' '\n' | sort -n`
    is_applehttp="true"

else
    debug "no applehttp stream, trying rtmp and flv"
    tcUrls=$(get_tcUrlsOLD "$JSON" "$BITRATE")
fi

if [ -z "$tcUrls" ]; then
    echo -e "ERROR: No rtmp streams found. No clip in that quality?\nPlease visit http://svtget.se/ for updates and information.\nIf the website's down, use a search engine to find copies." >&2
    exit 1
fi

debug "tcUrls:\n$tcUrls"

pick_tcUrl $tcUrls

if [ $is_applehttp ]; then
    extension="mp4"
else
    extension="${tcUrl##*.}"
fi
debug "picked tcUrl:\n$tcUrl"

programName=$(echo $JSON | $SED -n 's/.*"folderStructure":"\([^\.]\+\).[^"]\+".*}/\1/p')
episodeName=$(echo $JSON | $SED -n 's/.*,"title":"\([^"]\+\)".*/\1/p' | $SED 's/-\+$//')
fileprefix="${programName}-${episodeName}"
filename="${fileprefix}.${extension}"
debug "filename:\n$filename"

if [ ! $play ] && [ $subtitles ]; then
	subUrl=$(get_sub "$JSON")
	debug "subUrl:\n$subUrl"
	if [ -z "$subUrl" ]; then
		echo "No subtitle found."
		subtitles=""
	else
		sub_filename="${fileprefix}.srt"
	fi
else
	subUrl=""
fi

if [ ! $play ] && [ -e "$filename" ]; then
    askOverwrite "$filename"
fi

if [ $play ]; then
    if [ $is_applehttp ]; then
	do_eval "ffmpeg -i \"$tcUrl\" $ffmpeg_flags - | \"$mediaplayer\" - \"$subUrl\" &>/dev/null" 
    elif [ $extension == "mp4" ]; then
	do_eval "rtmpdump -r \"$tcUrl\" -W \"$swfUrl\" -o - | \"$mediaplayer\" - \"$subUrl\" &>/dev/null"
    elif [ $extension == "flv" ]; then
	do_eval "$mediaplayer \"$tcUrl\" \"$subUrl\" &>/dev/null"
    fi
else # if [ ! $play ]
    if [ $subtitles ]; then
	debug "get subtiles cmd:\ncurl \"$subUrl\" -o \"$sub_filename\""
	if [ ! $debug ]; then
	    echo "Downloading subtitles: $sub_filename"
	    curl "$subUrl" -o "$sub_filename"
	fi
    fi
    if [ $is_applehttp ] && [ $num_workers -gt 1 ]; then
	# parallel download. default number of workers is 8
	# this increases the download speed by a factor of up to 8
	# chunks are downloaded and decrypted manually and then muxed together with ffmpeg
	debug "parallel_download $tcUrl $fileprefix"
	if [ ! $debug ]; then
	    parallel_download $tcUrl $fileprefix
	fi
    elif [ $is_applehttp ]; then
        # in case of any problem with segmentation fault. make sure you have latest possibe ffmpeg. on Mac build ffmpeg from source.
        # bug ticket: http://ffmpeg.org/trac/ffmpeg/ticket/749
	do_eval "ffmpeg -i \"$tcUrl\" $ffmpeg_flags \"$filename\""
    elif [ "$extension" == "mp4" ]; then
	do_eval "rtmpdump -r \"$tcUrl\" -W \"$swfUrl\" -o \"$filename\""
    elif [ $extension == "flv" ]; then
	do_eval "curl \"$tcUrl\" -o \"$filename\""
    fi
fi

exit 0
